package nz.ac.wgtn.veracity.drivers.alfresco.setup;
// Generated by Selenium IDE
import org.junit.rules.TestRule;
import org.junit.runners.MethodSorters;
import org.testng.annotations.*;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.jsoup.Jsoup;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import com.carrotsearch.junitbenchmarks.BenchmarkRule;

import org.openqa.selenium.JavascriptExecutor;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * Suite of workflows for testing the OpenMRS system
 * 
 * @author Jayen Gulab
 */
public abstract class SeleniumSetup {
  protected WebDriver driver;
  protected JavascriptExecutor js;
  protected Map<String, Object> vars;
  protected static int testNumber = 1;
  String driverVersion = null;
  
  @Rule
  public TestRule benchmark = new BenchmarkRule();
  
  /**
   * waits for window to be open
   * 
   * @param timeout
   * how long to wait for the window
   * @return
   * next window
   */
  public String waitForWindow(int timeout) {
	    try {
	      Thread.sleep(timeout);
	    } catch (InterruptedException e) {
	      e.printStackTrace();
	    }
	    Set<String> whNow = driver.getWindowHandles();
	    @SuppressWarnings("unchecked")
		Set<String> whThen = (Set<String>) vars.get("window_handles");
	    if (whNow.size() > whThen.size()) {
	      whNow.removeAll(whThen);
	    }
	    return whNow.iterator().next();
  }
  
  /**
   * checks what the current operating system of the machine is
   * and sets the driver version to the corresponding OS
   * 
   * @param os
   * Operating system version
   */
  public void getOS(String os) {
	if (os.contains("nux")) {
		driverVersion = "chromedriver_linux";
	}
	else if (os.contains("mac")) {
		driverVersion = "chromedriver_mac";
	}
	else {
		System.out.println("-------------------------------------------------------------------------------------------------------------------");
		System.out.println("Valid Operating system not detected");
		System.out.println("-------------------------------------------------------------------------------------------------------------------");
		System.exit(0);
	}
  }
  
  /**
   * Error throw message when the OpenMRS site is not ready yet to be tested
   */
  public void throwError() {
	System.out.println("-------------------------------------------------------------------------------------------------------------------");
	System.out.println("Server is not ready yet try again in a couple minutes or look at README for instructions on how to start server");
	System.out.println("-------------------------------------------------------------------------------------------------------------------");
	System.exit(0);
  }
  
  /**
   * Checks to see if the server is currently running or not and whether
   * the database has been set up and initialised
   * 
   * @throws MalformedURLException
   * incorrect URL string
   */
  public void serverUp() throws MalformedURLException {
	URL url = new URL("http://localhost:8080/share/page/");
	try {
		HttpURLConnection http = (HttpURLConnection)url.openConnection(); // create connection with OpenMRS site
		http.setRequestMethod("GET");
		http.connect();
	} catch (IOException e) {
		throwError();
	}
	try {
		String title = Jsoup.connect("http://localhost:8080/share/page").get().title();
		if (!(title.equals("Alfresco Â» Login"))) { // checks if webpage is the login screen otherwise the site is still setting up
			throwError();
		}
	} catch (IOException e) {
		throwError();
	}
  }
  
  @SuppressWarnings("deprecation")
  @BeforeMethod
  public void setUp() throws IOException {
	serverUp(); // checks if the server is up
	System.out.println("\n");
	Properties prop = new Properties();
	prop.load(SeleniumSetup.class.getClassLoader().getResourceAsStream("project.properties"));
	getOS(System.getProperty("os.name").toLowerCase()); // gets OS to set correct driver
	System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "/src/test/resources/" + driverVersion); // sets correct chromedriver
	System.setProperty("webdriver.chrome.silentOutput", "true"); // remove chromedriver logs
	ChromeOptions options = new ChromeOptions();
	options.addArguments("--no-sandbox");
	options.addArguments("--remote-allow-origins=*");
	options.addArguments("--disable-dev-shm-usage");
	if (prop.getProperty("version").equals("headless")) { // checks if user wants to run tests in headless mode if yes then set options to --headless
		options.addArguments("--headless");
	}
	driver = new ChromeDriver(options);
	js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
	driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }
  
  @AfterMethod
  public void tearDown() {
    testNumber++;
   	driver.quit(); // closes driver
	System.out.println("\n");
  }
  
  public WebDriver getDriver() {
	return driver;
  }
}
